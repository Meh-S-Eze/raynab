---
description: 
globs: 
alwaysApply: true
---
# Raycast AI Extension for YNAB: Project Structure and Implementation Guide

## Project Overview
We are creating a Raycast AI Extension for YNAB (You Need A Budget) that leverages existing business logic while providing a thin adapter layer for AI interactions. This extension will allow users to interact with their YNAB data using natural language through Raycast's AI interface.

## Project Structure

```
raynab/
├── src/
│   ├── lib/
│   │   ├── api.ts
│   │   ├── currency.ts
│   │   ├── validation.ts
│   │   ├── preferences.ts
│   │   ├── errors.ts
│   │   └── tools/
│   │       └── base-tool.ts
│   ├── tools/
│   │   ├── create_transaction.ts
│   │   ├── get_budget_summary.ts
│   │   ├── list_transactions.ts
│   │   └── get_category_balance.ts
│   └── index.ts
├── __tests__/
│   └── tools/
│       └── create_transaction.test.ts
└── evals/
    └── create_transaction.json
```

## Key Components

1. **Existing Business Logic** (src/lib/): Contains core YNAB functionality.
2. **Base Tool Template** (src/lib/tools/base-tool.ts): Provides a reusable pattern for creating thin tool adapters.
3. **Tool Implementations** (src/tools/): Individual tools that act as thin adapters between AI and business logic.
4. **Tests** (__tests__/): Unit tests for tool implementations.
5. **Evals** (evals/): Test cases for AI interactions with tools.

## Implementation Approach

1. Reuse existing business logic from src/lib/.
2. Create thin tool adapters in src/tools/ using the base tool template.
3. Implement proper input validation, error handling, and response formatting in each tool.
4. Add confirmations for destructive actions.
5. Ensure proper loading state management and user feedback.
6. Implement comprehensive unit tests for each tool.
7. Create eval test cases for AI interactions.

## Best Practices

1. Keep tools focused on input/output adaptation.
2. Leverage existing functions for currency conversion, data validation, and error handling.
3. Maintain consistent response formats across all tools.
4. Implement proper runtime dependency checks (e.g., YNAB token validation).
5. Use Zod for schema validation that aligns with existing business logic.
6. Provide clear, AI-friendly error messages and follow-up suggestions.

By following this structure and approach, we ensure a clean separation between the AI interface and core YNAB functionality, allowing for easier maintenance and future extensibility of the Raycast AI Extension for YNAB.

Citations:
[1] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/17003646/46a756dc-4c2e-469a-913b-60d42030d442/paste.txt
[2] https://github.com/Meh-S-Eze/raynab/tree/feature/ai-tools

---
Answer from Perplexity: pplx.ai/share